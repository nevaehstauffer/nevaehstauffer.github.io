[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/predicting-top-10-rookies/index.html",
    "href": "posts/predicting-top-10-rookies/index.html",
    "title": "Using Linear Regression To Draft Fantasy Rookies",
    "section": "",
    "text": "I used linear regression to predict the top 10 successful upcoming rookies and how many points they could potentially produce in fantasy leagues. Some indicators that I chose to include were adding receiving TD as far as collegiate stats. Then as for NFL stats I decided to add yards per catch, completion percentage and touch percentage. There is a lot that goes into the success of a wide receiver, whether it is their quarterback, coach or the indicators above. They can be predicted to do something but its another things to actually do it, so we will see this upcoming season if they provide for their fantasy teams\nSo who are the top 10 upcoming wide receivers?\nCode\nlibrary(tidyverse)\nlibrary(cfbfastR)\nlibrary(tidymodels)\nlibrary(zoo)\nlibrary(bonsai)\nlibrary(gt)\n\nset.seed(1234)\n\nwrpicks &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/wrpicks1423.csv\") |&gt; \n  mutate(college_year = year - 1)\n\nwrstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/receiving1323.csv\")\nwrusage &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/usage1323.csv\")\nwrfantasy &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/fantasystats1423.csv\") |&gt; \n  mutate(nfl_team = case_when(\n    tm == \"ARI\" ~ \"Arizona Cardinals\",\n    tm == \"ATL\" ~ \"Atlanta Falcons\",\n    tm == \"BAL\" ~ \"Baltimore Ravens\",\n    tm == \"BUF\" ~ \"Buffalo Bills\",\n    tm == \"CAR\" ~ \"Carolina Panthers\",\n    tm == \"CHI\" ~ \"Chicago Bears\",\n    tm == \"CIN\" ~ \"Cincinnati Bengals\",\n    tm == \"CLE\" ~ \"Cleveland Browns\",\n    tm == \"DAL\" ~ \"Dallas Cowboys\",\n    tm == \"DEN\" ~ \"Denver Broncos\",\n    tm == \"DET\" ~ \"Detroit Lions\",\n    tm == \"GNB\" ~ \"Green Bay Packers\",\n    tm == \"HOU\" ~ \"Houston Texans\",\n    tm == \"IND\" ~ \"Indianapolis Colts\",\n    tm == \"JAX\" ~ \"Jacksonville Jaguars\",\n    tm == \"KAN\" ~ \"Kansas City Chiefs\",\n    tm == \"LAC\" ~ \"Los Angeles Chargers\", \n    tm == \"LAR\" ~ \"Los Angeles Rams\", \n    tm == \"LVR\" ~ \"Las Vegas Raiders\",\n    tm == \"MIA\" ~ \"Miami Dolphins\",  \n    tm == \"MIN\" ~ \"Minnesota Vikings\",\n    tm == \"NOR\" ~ \"New Orleans Saints\",\n    tm == \"NWE\" ~ \"New England Patriots\",\n    tm == \"NYG\" ~ \"New York Giants\",\n    tm == \"NYJ\" ~ \"New York Jets\",\n    tm == \"OAK\" ~ \"Las Vegas Raiders\",\n    tm == \"PHI\" ~ \"Philadelphia Eagles\",\n    tm == \"PIT\" ~ \"Pittsburgh Steelers\",\n    tm == \"SDG\" ~ \"Los Angeles Chargers\",\n    tm == \"SEA\" ~ \"Seattle Seahawks\",\n    tm == \"SFO\" ~ \"San Francisco 49ers\",\n    tm == \"STL\" ~ \"Los Angeles Rams\",\n    tm == \"TAM\" ~ \"Tampa Bay Buccaneers\",\n    tm == \"TEN\" ~ \"Tennessee Titans\",\n    tm == \"WAS\" ~ \"Washington Commanders\",\n  ))\n\nnflstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/nfl_passing_offense0023.csv\") |&gt; filter(season &gt;= 2009) |&gt; \n  mutate(\n    nfl_team = case_when(\n      tm == \"Oakland Raiders\" ~ \"Las Vegas Raiders\",\n      tm == \"San Diego Chargers\" ~ \"Los Angeles Chargers\",\n      tm == \"St. Louis Rams\" ~ \"Los Angeles Rams\",\n      tm == \"Washington Football Team\" ~ \"Washington Commanders\",\n      tm == \"Washington Redskins\" ~ \"Washington Commanders\",\n      TRUE ~ tm\n      ))\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_yds,\n    receiving_td,\n  )\n\nwrfantasyselected &lt;- wrfantasy |&gt; \n  filter(fant_pos == \"WR\") |&gt; \n  select(\n    season,\n    player, \n    nfl_team,\n    fant_pos,\n    fant_pt\n  )\n\nnflpassingselected &lt;- nflstats |&gt; \n  mutate(\n    rolling_mean_passing_yards = rollmean(yds, k=5, align = \"right\", fill=NA),\n    rolling_mean_passing_tds = rollmean(td, k=5, align = \"right\", fill=NA),\n  ) |&gt; \n  filter(season &gt;= 2014) |&gt; \n  select(\n    season,\n    nfl_team,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    y_c,\n    cmp_percent,\n    td_percent,\n    \n  )\n  \nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrpicksandfantasy &lt;- wrfantasyselected |&gt; \n  inner_join(wrpicksstats, by=c(\"player\" = \"name\", \"season\"=\"year\")) \n\nwrmodeling &lt;- wrpicksandfantasy |&gt;\n  left_join(nflpassingselected, by=c(\"season\"=\"season\", \"nfl_team.x\"=\"nfl_team\")) |&gt; \n  na.omit() |&gt; \n  select(-nfl_team.y)\n\nwrmodelingselected &lt;- wrmodeling |&gt; \n  select(\n    season,\n    player,\n    nfl_team.x,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    fant_pt,\n    receiving_td,\n    y_c,\n    cmp_percent,\n    td_percent\n  ) |&gt; \n  rename(\n    nfl_team = nfl_team.x\n  )\n\nplayer_split &lt;- initial_split(wrmodelingselected, prop = .8)\n\nplayer_train &lt;- training(player_split)\nplayer_test &lt;- testing(player_split)\n\nplayer_recipe &lt;- \n  recipe(fant_pt ~ ., data = player_train) |&gt; \n  update_role(player, season, nfl_team, new_role = \"ID\")\n\nlinear_mod &lt;- \n  linear_reg() |&gt; \n  set_engine(\"lm\") |&gt;\n  set_mode(\"regression\")\n\nlinear_workflow &lt;- \n  workflow() %&gt;% \n  add_model(linear_mod) %&gt;% \n  add_recipe(player_recipe)\n\nlinear_fit &lt;- \n  linear_workflow %&gt;% \n  fit(data = player_train)\n\n# Start the prediction for this season. The NFL team names are a mess because of choices made by the picks data provider. They just list them by city name, which creates problems in Los Angeles and New York. \n\nwrpicks &lt;- cfbd_draft_picks(year = 2024) |&gt; \n  filter(position == \"Wide Receiver\") |&gt; \n  mutate(college_year = year - 1) |&gt; \n  mutate(college_athlete_id = as.character(college_athlete_id)) |&gt; \n  mutate(nfl_team = case_when(\n    nfl_team == \"Arizona\" ~ \"Arizona Cardinals\",\n    nfl_team == \"Atlanta\" ~ \"Atlanta Falcons\",\n    nfl_team == \"Baltimore\" ~ \"Baltimore Ravens\",\n    nfl_team == \"Buffalo\" ~ \"Buffalo Bills\",\n    nfl_team == \"Carolina\" ~ \"Carolina Panthers\",\n    nfl_team == \"Chicago\" ~ \"Chicago Bears\",\n    nfl_team == \"Cincinnati\" ~ \"Cincinnati Bengals\",\n    nfl_team == \"Cleveland\" ~ \"Cleveland Browns\",\n    nfl_team == \"Dallas\" ~ \"Dallas Cowboys\",\n    nfl_team == \"Denver\" ~ \"Denver Broncos\",\n    nfl_team == \"Detroit\" ~ \"Detroit Lions\",\n    nfl_team == \"Green Bay\" ~ \"Green Bay Packers\",\n    nfl_team == \"Houston\" ~ \"Houston Texans\",\n    nfl_team == \"Indianapolis\" ~ \"Indianapolis Colts\",\n    nfl_team == \"Jacksonville\" ~ \"Jacksonville Jaguars\",\n    nfl_team == \"Kansas City\" ~ \"Kansas City Chiefs\",\n    name == \"Ladd McConkey\" ~ \"Los Angeles Chargers\", \n    name == \"Brenden Rice\" ~ \"Los Angeles Chargers\", \n    name == \"Cornelius Johnson\" ~ \"Los Angeles Chargers\",\n    name == \"Jordan Whittington\" ~ \"Los Angeles Rams\", \n    nfl_team == \"Las Vegas\" ~ \"Las Vegas Raiders\",\n    nfl_team == \"Miami\" ~ \"Miami Dolphins\",  \n    nfl_team == \"Minnesota\" ~ \"Minnesota Vikings\",\n    nfl_team == \"New Orleans\" ~ \"New Orleans Saints\",\n    nfl_team == \"New England\" ~ \"New England Patriots\",\n    name == \"Malik Nabers\" ~ \"New York Giants\",\n    nfl_team == \"New York\" ~ \"New York Jets\",\n    nfl_team == \"Philadelphia\" ~ \"Philadelphia Eagles\",\n    nfl_team == \"Pittsburgh\" ~ \"Pittsburgh Steelers\",\n    nfl_team == \"Seattle\" ~ \"Seattle Seahawks\",\n    nfl_team == \"San Francisco\" ~ \"San Francisco 49ers\",\n    nfl_team == \"St Louis\" ~ \"Los Angeles Rams\",\n    nfl_team == \"Tampa Bay\" ~ \"Tampa Bay Buccaneers\",\n    nfl_team == \"Tennessee\" ~ \"Tennessee Titans\",\n    nfl_team == \"Washington\" ~ \"Washington Commanders\",\n  ))\n\nwrstats &lt;- cfbd_stats_season_player(2023, category = \"receiving\") |&gt; \n  mutate(season = 2023)\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_yds,\n    receiving_td,\n  )\n\nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrmodeling &lt;- wrpicksstats |&gt;\n  left_join(nflpassingselected, by=c(\"college_year\"=\"season\", \"nfl_team\"=\"nfl_team\")) |&gt;\n  select(\n    year,\n    name,\n    nfl_team,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    receiving_td,\n    y_c,\n    cmp_percent,\n    td_percent,\n  ) |&gt; \n  rename(\n    player = name,\n    season = year\n  )\n\nlinearpredict &lt;- \n  linear_fit %&gt;% \n  predict(new_data = wrmodeling) %&gt;%\n  bind_cols(wrmodeling) \n\n# now that we have predictions, make the table\n\nlinearpredict |&gt; \n  select(player, nfl_team, overall, .pred) |&gt; \n  top_n(10, wt=.pred) |&gt; \n  arrange(desc(.pred)) |&gt; \n  gt() |&gt; \n  cols_label(\n    player = \"Player\",\n    nfl_team = \"Team\",\n    overall = \"Pick\",\n    .pred = \"Predicted fantasy points\"\n  )  |&gt;\n  tab_header(\n    title = \"Predicting the Top 10 Rookie Wide Receivers\",\n    subtitle = \"These wide receivers are predicted be the most valuable in fantasy points this upcoming NFL season\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Nevaeh Stauffer  |  **Source:** CFDB, Pro-Football Reference\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      Predicting the Top 10 Rookie Wide Receivers\n    \n    \n      These wide receivers are predicted be the most valuable in fantasy points this upcoming NFL season\n    \n    \n      Player\n      Team\n      Pick\n      Predicted fantasy points\n    \n  \n  \n    Ricky Pearsall\nSan Francisco 49ers\n31\n91.51330\n    Malik Nabers\nNew York Giants\n6\n76.36638\n    Keon Coleman\nBuffalo Bills\n33\n74.68693\n    Rome Odunze\nChicago Bears\n9\n74.43465\n    Marvin Harrison Jr.\nArizona Cardinals\n4\n73.38295\n    Xavier Worthy\nKansas City Chiefs\n28\n72.12762\n    Ladd McConkey\nLos Angeles Chargers\n34\n71.09288\n    Brian Thomas Jr.\nJacksonville Jaguars\n23\n71.02335\n    Ja'Lynn Polk\nNew England Patriots\n37\n62.31777\n    Xavier Legette\nCarolina Panthers\n32\n61.16421\n  \n  \n    \n      By: Nevaeh Stauffer  |  Source: CFDB, Pro-Football Reference"
  },
  {
    "objectID": "posts/predicting-top-10-rookies/index.html#ricky-pearsall-san-franciso-49ers-31",
    "href": "posts/predicting-top-10-rookies/index.html#ricky-pearsall-san-franciso-49ers-31",
    "title": "Using Linear Regression To Draft Fantasy Rookies",
    "section": "1. Ricky Pearsall, San Franciso 49ers, 31",
    "text": "1. Ricky Pearsall, San Franciso 49ers, 31\nMy indicators predicted Ricky Pearsall to be the top producing fantasy points rookie wide receiver in the league. The 49ers average more passing plays than running plays and Brock Purdy is showing no signs of slowing down after the last few successful seasons."
  },
  {
    "objectID": "posts/predicting-top-10-rookies/index.html#malik-nabers-new-york-giants-6",
    "href": "posts/predicting-top-10-rookies/index.html#malik-nabers-new-york-giants-6",
    "title": "Using Linear Regression To Draft Fantasy Rookies",
    "section": "2. Malik Nabers, New York Giants, 6",
    "text": "2. Malik Nabers, New York Giants, 6\nAt LSU Nabers proved he was talented enough to play at the next level after having 2500 receiving yards combined his last two college seasons. The Giants are at a rebuilding phase so they will be looking for their next star player."
  },
  {
    "objectID": "posts/predicting-top-10-rookies/index.html#keon-coleman-buffalo-bills-33",
    "href": "posts/predicting-top-10-rookies/index.html#keon-coleman-buffalo-bills-33",
    "title": "Using Linear Regression To Draft Fantasy Rookies",
    "section": "3. Keon Coleman, Buffalo Bills, 33",
    "text": "3. Keon Coleman, Buffalo Bills, 33\nKeon Coleman racked in over 1,500 receiving yards during his college career. Josh Allen has led the Bills to over 10 wins in each of the last 4 seasons while throwing for over 4,000 yards in each season. The recent departure of Stefon Diggs also increases the chance of success for Coleman."
  },
  {
    "objectID": "posts/predicting-top-10-rookies/index.html#rome-odunze-chicago-bears-9",
    "href": "posts/predicting-top-10-rookies/index.html#rome-odunze-chicago-bears-9",
    "title": "Using Linear Regression To Draft Fantasy Rookies",
    "section": "4. Rome Odunze, Chicago Bears, 9",
    "text": "4. Rome Odunze, Chicago Bears, 9\nRome Odunze averaged over 100 yards last season at Washington. The Bears offense had more passing touchdowns than running touchdowns last season. Also Odunze will be going from a Heisman finalist quarterback to a Heisman winning quarterback so it won’t take long for him to adjust."
  },
  {
    "objectID": "posts/predicting-top-10-rookies/index.html#marvin-harrison-jr.-arizona-cardinals-4",
    "href": "posts/predicting-top-10-rookies/index.html#marvin-harrison-jr.-arizona-cardinals-4",
    "title": "Using Linear Regression To Draft Fantasy Rookies",
    "section": "5. Marvin Harrison Jr., Arizona Cardinals, 4",
    "text": "5. Marvin Harrison Jr., Arizona Cardinals, 4\nIn three season at Ohio State, Harrison caught over 150 passes for more than 2,000 yards. Coming off just 4 wins last season, the Arizona Cardinals will be looking for a star to rise up in the wide receiver position as their offense passes more than it rushes."
  },
  {
    "objectID": "posts/predicting-top-10-rookies/index.html#xavier-worthy-kansas-city-chiefs-28",
    "href": "posts/predicting-top-10-rookies/index.html#xavier-worthy-kansas-city-chiefs-28",
    "title": "Using Linear Regression To Draft Fantasy Rookies",
    "section": "6. Xavier Worthy, Kansas City Chiefs, 28",
    "text": "6. Xavier Worthy, Kansas City Chiefs, 28\nXavier Worthy caught nearly 200 passes for over 2,700 yards in his college career which looks promising for the Chiefs. The reigning Super Bowl champions are a pass-heavy team who has strongly established their offense which may make it difficult for Worthy to get targets throughout the season."
  },
  {
    "objectID": "posts/predicting-top-10-rookies/index.html#ladd-mcconkey-los-angeles-chargers-34",
    "href": "posts/predicting-top-10-rookies/index.html#ladd-mcconkey-los-angeles-chargers-34",
    "title": "Using Linear Regression To Draft Fantasy Rookies",
    "section": "7. Ladd McConkey, Los Angeles Chargers, 34",
    "text": "7. Ladd McConkey, Los Angeles Chargers, 34\nLadd McConkey recorded over 1,500 receiving yards during his time at Georgia. He only played in 9 games last season which is probably the reason he is further down on this list. The Chargers had over double the amount of passing touchdowns than rushing touchdowns last season which is also probably the reason McConkey stayed near the middle of the list."
  },
  {
    "objectID": "posts/predicting-top-10-rookies/index.html#brian-thomas-jr.-jacksonville-jaguars-23",
    "href": "posts/predicting-top-10-rookies/index.html#brian-thomas-jr.-jacksonville-jaguars-23",
    "title": "Using Linear Regression To Draft Fantasy Rookies",
    "section": "8. Brian Thomas Jr., Jacksonville Jaguars, 23",
    "text": "8. Brian Thomas Jr., Jacksonville Jaguars, 23\nBrian Thomas Jr. had a successful career at LSU, catching 24 touchdowns total. Only 7 of those came in his first 2 seasons though which is probably the reason Thomas fell to number 8 on this list. The last two years, the Jaguars have fallen in the bottom half of the league for passing touchdowns. Trevor Lawrence is still fairly new to the league which makes it harder for a young team as well."
  },
  {
    "objectID": "posts/predicting-top-10-rookies/index.html#jalynn-polk-new-england-patriots-37",
    "href": "posts/predicting-top-10-rookies/index.html#jalynn-polk-new-england-patriots-37",
    "title": "Using Linear Regression To Draft Fantasy Rookies",
    "section": "9. Ja’Lynn Polk, New England Patriots, 37",
    "text": "9. Ja’Lynn Polk, New England Patriots, 37\nJa’Lynn Polk only played in 31 games during his time in college because of a 3-game season he had in 2021. He had 115 catches which is lower than the other receivers on this last. Being drafted to the Patriots also hurt his standing on this list due to some recent offensive struggles the team has had in the last few years."
  },
  {
    "objectID": "posts/predicting-top-10-rookies/index.html#xavier-legette-carolina-panthers-32",
    "href": "posts/predicting-top-10-rookies/index.html#xavier-legette-carolina-panthers-32",
    "title": "Using Linear Regression To Draft Fantasy Rookies",
    "section": "10. Xavier Legette, Carolina Panthers, 32",
    "text": "10. Xavier Legette, Carolina Panthers, 32\nXavier Legette falls lower on this list most likely due to having 113 career catches for only 12 touchdowns. The Panthers have struggled majorily in the last two seasons on the offensive side of the ball. Last season, they only had 20 touchdowns, 13 of which were passing touchdowns."
  },
  {
    "objectID": "posts/introduction /index.html",
    "href": "posts/introduction /index.html",
    "title": "CHANGE THIS TO BE THE TITLE OF YOUR POST",
    "section": "",
    "text": "Hi. My name is Nevaeh Stauffer"
  },
  {
    "objectID": "posts/machine-learning-ncaa-bracket-2024/index.html",
    "href": "posts/machine-learning-ncaa-bracket-2024/index.html",
    "title": "Machine Learning 2024 NCAA Bracket",
    "section": "",
    "text": "I attempted to predict the outcome of this year’s March Madness tournament using RStudio and lightGBM model.\nI think this tactic of bracket filling out proved that computers know teams way better than I do because this bracket was a lot better than my personal one, which I was not expecting. \n\n\nCode\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(bonsai)\nlibrary(hoopR)\nlibrary(zoo)\nlibrary(dplyr)\nlibrary(gt)\n\ndf &lt;- load_mbb_team_box(season = 2015:2024) |&gt;\n  filter(game_date &lt; as.Date(\"2024-03-19\")) \n\n\nmargins &lt;- df |&gt;\n  mutate(\n    possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n  points_per_possession = team_score/possessions,\n  defensive_points_per_posession = opponent_team_score/possessions,\n  offensive_efficiency = points_per_possession * 100,\n  defensive_efficiency = defensive_points_per_posession *100,\n  efficiency_margin = offensive_efficiency - defensive_efficiency,\n  score_margin = team_score - opponent_team_score,\n  absolute_score_margin = abs(score_margin)\n  ) |&gt;\n  filter(absolute_score_margin &lt;= 40)\n\n\nschedule &lt;- load_mbb_schedule(\n seasons = 2015:2024\n)\n\n\nnonot &lt;- schedule |&gt;\n  filter(status_type_completed == TRUE) |&gt;\n  filter(grepl(\"OT\", status_type_detail) == FALSE) |&gt;\n  pull(id)\n\n\ngoodgames &lt;- margins |&gt; \n  filter(game_id %in% nonot)\n\n\nteamside &lt;- goodgames |&gt;\n  arrange(game_date) |&gt;\n  group_by(team_short_display_name,season) |&gt;\n  mutate(\n    team_rolling_mean_offensive_efficiency = rollmean(lag(offensive_efficiency, n=1), k=5, align=\"right\", fill=NA),\n    team_cumulative_mean_offensive_efficiency = lag(cummean(offensive_efficiency), n=1),\n    team_rolling_mean_defensive_efficiency = rollmean(lag(defensive_efficiency, n=1), k=5, align=\"right\", fill=NA),\n    team_cumulative_mean_defensive_efficiency = lag(cummean(defensive_efficiency), n=1)\n) |&gt;\n  ungroup() |&gt;\n  select(\n    season,\n    game_id,\n    game_date,\n    team_id,\n    team_short_display_name,\n    team_winner,\n    team_rolling_mean_offensive_efficiency,\n    team_cumulative_mean_offensive_efficiency,\n    team_rolling_mean_defensive_efficiency,\n    team_cumulative_mean_defensive_efficiency,\n    team_score,\n    opponent_team_id,\n  )\n\nopponentside &lt;- teamside |&gt;\n  select(\n    -opponent_team_id,\n    -team_winner\n  ) |&gt;\n  rename (\n    opponent_score = team_score,\n    opponent_team_id = team_id,\n    opponent_team_short_display_name = team_short_display_name,\n    opponent_rolling_mean_offensive_efficiency = team_rolling_mean_offensive_efficiency ,\n    opponent_cumulative_mean_offensive_efficiency = team_cumulative_mean_offensive_efficiency,\n    opponent_rolling_mean_defensive_efficiency =  team_rolling_mean_defensive_efficiency,\n    opponent_cumulative_mean_defensive_efficiency = team_cumulative_mean_defensive_efficiency,\n  )\n\ngames_for_modeling &lt;- teamside |&gt; inner_join(opponentside)\n\ngames_for_modeling &lt;- games_for_modeling |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_score ~ \"W\",\n    opponent_score &gt; team_score ~ \"L\"\n)))\n\ngames_for_modeling$team_result &lt;- relevel(games_for_modeling$team_result, ref=\"W\")\n\nmodelgames &lt;- games_for_modeling |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season,\n    team_rolling_mean_offensive_efficiency,\n    team_cumulative_mean_offensive_efficiency,\n    team_rolling_mean_defensive_efficiency,\n    team_cumulative_mean_defensive_efficiency,\n    opponent_rolling_mean_offensive_efficiency,\n    opponent_cumulative_mean_offensive_efficiency,\n    opponent_rolling_mean_defensive_efficiency,\n    opponent_cumulative_mean_defensive_efficiency,\n    team_result\n    ) |&gt;\n  na.omit()\n\n\ngame_split &lt;- initial_split(modelgames, prop = .8)\ngame_train &lt;- training(game_split)\ngame_test &lt;- testing(game_split)\n\ngame_recipe &lt;- \n  recipe(team_result ~ ., data = game_train) |&gt; \n  update_role(game_id, game_date, team_short_display_name, opponent_team_short_display_name, season, new_role = \"ID\") |&gt;\n  step_normalize(all_predictors())\n\nsummary(game_recipe)\n\n\nlightgbm_mod &lt;- \n  boost_tree() |&gt;\n  set_engine(\"lightgbm\") |&gt;\n  set_mode(mode = \"classification\")\n\n\nlightgbm_workflow &lt;- \n  workflow() |&gt; \n  add_model(lightgbm_mod) |&gt; \n  add_recipe(game_recipe)\n\nlightgbm_fit &lt;- \n  lightgbm_workflow |&gt; \n  fit(data = game_train)\n\n\nteamside &lt;- goodgames |&gt;\n  arrange(game_date) |&gt;\n  group_by(team_short_display_name,season) |&gt;\n  mutate(\n    team_rolling_mean_offensive_efficiency = rollmean(offensive_efficiency, k=10, align=\"right\", fill=NA),\n    team_cumulative_mean_offensive_efficiency = cummean(offensive_efficiency),\n    team_rolling_mean_defensive_efficiency = rollmean(defensive_efficiency, k=10, align=\"right\", fill=NA),\n    team_cumulative_mean_defensive_efficiency = cummean(defensive_efficiency)\n) |&gt;\n  ungroup() |&gt;\n  select(\n    season,\n    game_id,\n    game_date,\n    team_id,\n    team_short_display_name,\n    team_winner,\n    team_rolling_mean_offensive_efficiency,\n    team_cumulative_mean_offensive_efficiency,\n    team_rolling_mean_defensive_efficiency,\n    team_cumulative_mean_defensive_efficiency,\n    team_score,\n    opponent_team_id,\n  )\n\n\nopponentside &lt;- teamside |&gt;\n  select(\n    -opponent_team_id,\n    -team_winner\n  ) |&gt;\n  rename (\n    opponent_score = team_score,\n    opponent_team_id = team_id,\n    opponent_team_short_display_name = team_short_display_name,\n    opponent_rolling_mean_offensive_efficiency = team_rolling_mean_offensive_efficiency ,\n    opponent_cumulative_mean_offensive_efficiency = team_cumulative_mean_offensive_efficiency,\n    opponent_rolling_mean_defensive_efficiency =  team_rolling_mean_defensive_efficiency,\n    opponent_cumulative_mean_defensive_efficiency = team_cumulative_mean_defensive_efficiency,\n  )\n\ngames_for_modeling &lt;- teamside |&gt; inner_join(opponentside)\n\ngames_for_modeling &lt;- games_for_modeling |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_score ~ \"W\",\n    opponent_score &gt; team_score ~ \"L\"\n)))\n\ngames_for_modeling$team_result &lt;- relevel(games_for_modeling$team_result, ref=\"W\")\n\nmodelgames &lt;- games_for_modeling |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season,\n    team_rolling_mean_offensive_efficiency,\n    team_cumulative_mean_offensive_efficiency,\n    team_rolling_mean_defensive_efficiency,\n    team_cumulative_mean_defensive_efficiency,\n    opponent_rolling_mean_offensive_efficiency,\n    opponent_cumulative_mean_offensive_efficiency,\n    opponent_rolling_mean_defensive_efficiency,\n    opponent_cumulative_mean_defensive_efficiency,\n    team_result\n    ) |&gt;\n  na.omit()\n\nplayingames &lt;- tibble(\n  team_short_display_name =\"Howard\",\n  opponent_team_short_display_name = \"Wagner\"\n) |&gt; add_row(\n  team_short_display_name = \"Boise St\",\n  opponent_team_short_display_name = \"Colorado\"\n) |&gt; add_row(\n  team_short_display_name = \"Montana St\",\n  opponent_team_short_display_name = \"Grambling\"\n) |&gt; add_row(\n  team_short_display_name = \"Colorado St\",\n  opponent_team_short_display_name = \"Virginia\"\n)\n\nplayingames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(playingames)\n\nplayingames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(playingames) \n\n\nplayingames &lt;- lightgbm_fit |&gt; predict(new_data = playingames) |&gt;\n  bind_cols(playingames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nplayingames &lt;- lightgbm_fit |&gt; predict(new_data = playingames, type=\"prob\") |&gt;\n  bind_cols(playingames) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nplayingames\n\n\neastround1games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Stetson\"\n) |&gt; add_row(\n  team_short_display_name=\"FAU\",\n  opponent_team_short_display_name=\"Northwestern\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"UAB\"\n) |&gt; add_row(\n  team_short_display_name=\"Auburn\",\n  opponent_team_short_display_name=\"Yale\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Duquesne\"\n) |&gt; add_row(\n  team_short_display_name=\"Illinois\",\n  opponent_team_short_display_name=\"Morehead St\"\n) |&gt; add_row(\n  team_short_display_name=\"Washington St\",\n  opponent_team_short_display_name=\"Drake\"\n) |&gt; add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_team_short_display_name=\"S Dakota St\"\n)\n\n\neastround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround1games)\n\neastround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround1games) \n\neastround1games &lt;- lightgbm_fit |&gt; predict(new_data = eastround1games) |&gt;\n  bind_cols(eastround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround1games &lt;- lightgbm_fit |&gt; predict(new_data = eastround1games, type=\"prob\") |&gt;\n  bind_cols(eastround1games) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround1games\n\n\nwestround1games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Wagner\"\n) |&gt; add_row(\n  team_short_display_name=\"Mississippi St\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Grand Canyon\"\n) |&gt; add_row(\n  team_short_display_name=\"Alabama\",\n  opponent_team_short_display_name=\"Charleston\"\n) |&gt; add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"New Mexico\"\n) |&gt; add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Nevada\"\n) |&gt; add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_team_short_display_name=\"Long Beach St\"\n)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround1games)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround1games) \n\nwestround1games &lt;- lightgbm_fit |&gt; predict(new_data = westround1games) |&gt;\n  bind_cols(westround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1games &lt;- lightgbm_fit |&gt; predict(new_data = westround1games, type=\"prob\") |&gt;\n  bind_cols(westround1games) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1games\n\n\nsouthround1games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Longwood\"\n) |&gt; add_row(\n  team_short_display_name=\"Nebraska\",\n  opponent_team_short_display_name=\"Texas A&M\"\n) |&gt; add_row(\n  team_short_display_name=\"Wisconsin\",\n  opponent_team_short_display_name=\"James Madison\"\n) |&gt; add_row(\n  team_short_display_name=\"Duke\",\n  opponent_team_short_display_name=\"Vermont\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"NC State\"\n) |&gt; add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Oakland\"\n) |&gt; add_row(\n  team_short_display_name=\"Florida\",\n  opponent_team_short_display_name=\"Colorado\"\n) |&gt; add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_team_short_display_name=\"Western KY\"\n)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround1games)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround1games) \n\nsouthround1games &lt;- lightgbm_fit |&gt; predict(new_data = southround1games) |&gt;\n  bind_cols(southround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1games &lt;- lightgbm_fit |&gt; predict(new_data = southround1games, type=\"prob\") |&gt;\n  bind_cols(southround1games) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1games\n\n\n\n\nmidwestround1games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Grambling\"\n) |&gt; add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_team_short_display_name=\"TCU\"\n) |&gt; add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Kansas\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Oregon\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Akron\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Colorado St\"\n) |&gt; add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_team_short_display_name=\"Saint Peter's\"\n)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround1games)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround1games) \n\nmidwestround1games &lt;- lightgbm_fit |&gt; predict(new_data = midwestround1games) |&gt;\n  bind_cols(midwestround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1games &lt;- lightgbm_fit |&gt; predict(new_data = midwestround1games, type=\"prob\") |&gt;\n  bind_cols(midwestround1games) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1games\n\n\neastround2games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"FAU\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Illinois\"\n) |&gt; add_row(\n  team_short_display_name=\"Drake\",\n  opponent_team_short_display_name=\"Iowa State\"\n)  \n\n\neastround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround2games)\n\neastround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround2games) \n\neastround2games &lt;- lightgbm_fit |&gt; predict(new_data = eastround2games) |&gt;\n  bind_cols(eastround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2games &lt;- lightgbm_fit |&gt; predict(new_data = eastround2games, type=\"prob\") |&gt;\n  bind_cols(eastround2games) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2games\n\n\nwestround2games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Mississippi St\"\n) |&gt; add_row(\n  team_short_display_name=\"Grand Canyon\",\n  opponent_team_short_display_name=\"Alabama\"\n) |&gt; add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Arizona\"\n) \n\n\nwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround2games)\n\nwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround2games) \n\nwestround2games &lt;- lightgbm_fit |&gt; predict(new_data = westround2games) |&gt;\n  bind_cols(westround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2games &lt;- lightgbm_fit |&gt; predict(new_data = westround2games, type=\"prob\") |&gt;\n  bind_cols(westround2games) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2games\n\n\nsouthround2games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Nebraska\"\n) |&gt; add_row(\n  team_short_display_name=\"James Madison\",\n  opponent_team_short_display_name=\"Duke\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"Kentucky\"\n) |&gt; add_row(\n  team_short_display_name=\"Colorado\",\n  opponent_team_short_display_name=\"Marquette\"\n) \n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround2games)\n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround2games) \n\nsouthround2games &lt;- lightgbm_fit |&gt; predict(new_data = southround2games) |&gt;\n  bind_cols(southround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2games &lt;- lightgbm_fit |&gt; predict(new_data = southround2games, type=\"prob\") |&gt;\n  bind_cols(southround2games) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2games\n\nmidwestround2games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Utah State\"\n) |&gt; add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Creigton\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Tennesse\"\n) \n\n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround2games)\n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround2games) \n\nmidwestround2games &lt;- lightgbm_fit |&gt; predict(new_data = midwestround2games) |&gt;\n  bind_cols(midwestround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2games &lt;- lightgbm_fit |&gt; predict(new_data = midwestround2games, type=\"prob\") |&gt;\n  bind_cols(midwestround2games) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2games\n\n\nsweetsixteen &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"Illinois\",\n  opponent_team_short_display_name=\"Drake\"\n) |&gt; add_row(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Grand Canyon\"\n) |&gt; add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Arizona\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"James Madison\"\n) |&gt; add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Colorado\"\n) |&gt; add_row(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Gonzago\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Texas\"\n)\n\n\nsweetsixteen &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(sweetsixteen)\n\nsweetsixteen &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(sweetsixteen) \n\nsweetsixteen &lt;- lightgbm_fit |&gt; predict(new_data = sweetsixteen) |&gt;\n  bind_cols(sweetsixteen) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsweetsixteen &lt;- lightgbm_fit |&gt; predict(new_data = sweetsixteen, type=\"prob\") |&gt;\n  bind_cols(sweetsixteen) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsweetsixteen\n\n\neliteeight &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Drake\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Kentucky\"\n) |&gt; add_row(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Arizona\"\n) |&gt; add_row(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Texas\"\n) \n\n\neliteeight &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eliteeight)\n\neliteeight &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eliteeight) \n\neliteeight &lt;- lightgbm_fit |&gt; predict(new_data = eliteeight) |&gt;\n  bind_cols(eliteeight) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neliteeight &lt;- lightgbm_fit |&gt; predict(new_data = eliteeight, type=\"prob\") |&gt;\n  bind_cols(eliteeight) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neliteeight\n\n\nfinalfour &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Arizona\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Purdue\"\n) \n\n\nfinalfour &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(finalfour)\n\nfinalfour &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(finalfour) \n\nfinalfour &lt;- lightgbm_fit |&gt; predict(new_data = finalfour) |&gt;\n  bind_cols(finalfour) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinalfour &lt;- lightgbm_fit |&gt; predict(new_data = finalfour, type=\"prob\") |&gt;\n  bind_cols(finalfour) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinalfour\n\n\nchampionship &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Houston\"\n) \n\n\nchampionship &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(championship)\n\nchampionship &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(championship) \n\nchampionship &lt;- lightgbm_fit |&gt; predict(new_data = championship) |&gt;\n  bind_cols(championship) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nchampionship &lt;- lightgbm_fit |&gt; predict(new_data = championship, type=\"prob\") |&gt;\n  bind_cols(championship) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nchampionship\n\n\nBased on the predictors I used, there wasn’t a lot of room for upsets to occur within my model. I stuck to the offensive and defensive efficiency dictating the team’s success. This is why I was confused on this bracket having success because March Madness is known for the month of upsets and unpredictable games. The reason I stuck with such simple predictors was to see how much these two simple factors dictate teams late season success. \nLooking at the first rounds of games, 3 sides of my bracket predicted fairly well, those being the East, West and Midwest sides of the bracket.\nI went 18 for 24 or first round games for those conferences.   \nWhereas for the first 8 games of my South, the outcomes weren’t as successful.\n\n\nCode\nsouthround1games |&gt;\n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) |&gt;\n  gt() |&gt; \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt;\n  tab_header(\n    title = \"South: Round 1\",\n    subtitle = \"My model was pretty certain Kentucky wasn't getting upset.....\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Nevaeh Stauffer\")\n  ) |&gt;\n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt;\n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   )\n\n\n\n\n\n\n  \n    \n      South: Round 1\n    \n    \n      My model was pretty certain Kentucky wasn't getting upset.....\n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Houston\nW\n0.6868815\nLongwood\n    Wisconsin\nL\n0.3161155\nJames Madison\n    Kentucky\nW\n0.7399988\nOakland\n    Florida\nL\n0.4137553\nColorado\n    Texas Tech\nW\n0.6091574\nNC State\n    Marquette\nW\n0.5792104\nWestern KY\n    Nebraska\nW\n0.6303661\nTexas A&M\n    Duke\nW\n0.6922482\nVermont\n  \n  \n    \n      By: Nevaeh Stauffer\n    \n  \n  \n\n\n\n\nMy predictions based on my model for the South led me going 3 for 8 in that side of the bracket. That section of games clearly didn’t turn out the way it thought that it would. The reason is because of the lack of room for upsets, and there were a lot of upsets occurring in the South Region first round games.\nContrary to that, the lack of upsets my model had benefited me in the Midwest Region with there only being one upset, which seems uncommon for March play.\n\n\nCode\nmidwestround1games |&gt;\n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) |&gt;\n  gt() |&gt; \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt;\n  tab_header(\n    title = \"Midwest: Round 1\",\n    subtitle = \n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Nevaeh Stauffer\")\n  ) |&gt;\n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt;\n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   )\n\n\n\n\n\n\n  \n    \n      Midwest: Round 1\n    \n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Kansas\nL\n0.2706962\nSamford\n    Gonzaga\nW\n0.5393937\nMcNeese\n    Utah State\nW\n0.6155387\nTCU\n    Texas\nW\n0.5122972\nColorado St\n    Purdue\nW\n0.6930195\nGrambling\n    South Carolina\nW\n0.5743659\nOregon\n    Tennessee\nW\n0.7834552\nSaint Peter's\n    Creighton\nW\n0.6713828\nAkron\n  \n  \n    \n      By: Nevaeh Stauffer\n    \n  \n  \n\n\n\n\nDuring the first 32 games, I saw positive and negative outcomes of the predictors that I used. Throughout the remaining games of my bracket leading up to the championship. it stayed consistent. There were great picks and not so great picks.\nThe last few games of the bracket had a mix of both of those outcomes.\n\n\nCode\nfinalfour |&gt;\n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) |&gt;\n  gt() |&gt; \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt;\n  tab_header(\n    title = \"Final Four\",\n    subtitle = \"It Had All Four #1 Seeds to Be in Final Four\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Nevaeh Stauffer\")\n  ) |&gt;\n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt;\n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(.5)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   )\n\n\n\n\n\n\n  \n    \n      Final Four\n    \n    \n      It Had All Four #1 Seeds to Be in Final Four\n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    UConn\nW\n0.6833272\nArizona\n    Houston\nW\n0.5133439\nPurdue\n  \n  \n    \n      By: Nevaeh Stauffer\n    \n  \n  \n\n\n\n\nThe Final Four teams in the tournament were UConn, Purdue, NC State and Alabama. My machine had 2 of those 4 going to the Final Four which was pretty successful. Considering of the teams was NC State, you can’t blame the machine for not seeing that coming.\nOverall, the bracket my model produced wasn’t perfect but with the predictors I used, it ended up working out better than I thought it would."
  },
  {
    "objectID": "posts/big-ten-bench/index.html",
    "href": "posts/big-ten-bench/index.html",
    "title": "Which Big Ten Team Had the Most Effective Bench Players Last Season?",
    "section": "",
    "text": "The Big Ten Conference this past season was full of intense competition and each team held a lot of talent. The conference was led by Purdue who went 29-6 on the season and 15-5 in conference play.\nA lot of different things can contribute to a team’s success. Whether it’s points, assists or whatever. But another aspect to think about is who is making these things happen. Depth on your team can be helpful so which one of these Big Ten teams had the most depth?\nSports Reference is a sports statistics website that provides the statistics for all players on the roster. It provides the minutes played, every shot attempted and made, steals, assists and lots more. By using these resources, it is easy to determine which team had the most depth.\nThe first question is, what team had the most minutes played by bench players?\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidyverse)\nlibrary(ggalt)\nlibrary(ggtext)\n\nillinois &lt;- read_csv(\"illinois2023.csv\")\nindiana &lt;- read_csv(\"indiana2023.csv\")\niowa &lt;- read_csv(\"iowa2023.csv\")\nmaryland &lt;- read_csv(\"maryland2023.csv\")\nmichiganS &lt;- read_csv(\"michigan-state2023.csv\")\nmichigan &lt;- read_csv(\"michigan2023.csv\")\nminnesota &lt;- read_csv(\"minnesota2023.csv\")\nnebraska &lt;- read_csv(\"nebraska2023.csv\")\nnorth &lt;- read_csv(\"northwestern2023.csv\")\nohio &lt;- read_csv(\"ohio2023.csv\")\npenn &lt;- read_csv(\"penn-state2023.csv\")\npurdue &lt;- read_csv(\"purdue2023.csv\")\nrutgers &lt;- read_csv(\"rutgers2023.csv\")\nwisconsin &lt;- read_csv(\"wisconsin2023 .csv\")\n\nbigdancelist &lt;- c(\"Purdue\", \"Michigan State\", \"Illinois\", \"Iowa\", \"Maryland\", \"Indiana\", \"Northwestern\",\"Penn\" )\n\nbigten &lt;- bind_rows(illinois, indiana, iowa, maryland, michiganS, michigan, minnesota, nebraska, north, ohio, penn,purdue, rutgers, wisconsin) \n \n minutes &lt;- bigten |&gt;\n  filter(str_trim(Starter) == \"B\") |&gt;   \n  group_by(Team) |&gt;\n   summarize(\n     MP = sum(MP)\n   ) \n\n danceminutes &lt;- minutes |&gt;\n   filter(Team %in% bigdancelist)\n\nstats &lt;- bigten |&gt; \n  filter(Starter == \"B\") |&gt;\n  group_by(Team) |&gt; \n  summarise(\n    avOrebounds = mean(ORB),\n    avDrebounds = mean(DRB),\n    avsteals = mean(STL),\n    avassists = mean(AST)\n  ) |&gt;\n  select(Team, avOrebounds, avDrebounds, avsteals, avassists)\n\nggplot() + \n  geom_bar(data=minutes, aes(x=reorder(Team, MP), weight=MP), fill=\"lightgrey\") +\n  geom_bar(data=danceminutes, aes(x=reorder(Team, MP), weight=MP), fill=\"blue\") +\n  coord_flip() + \n  labs(\n    title = \"Nebrask\",\n    subtitle = \"Chatter\",\n    x = \"Team\",\n    y = \"Minutes Played\",\n    caption=\"Source: Sports Reference | Nevaeh Stauffer\"\n    ) +\n  theme_minimal() +\n  labs(\n    title = \"Nebraska's bench had the most minutes played\",\n    subtitle = \"They had over 2600 bench minutes while the next closest was Ohio State at 2400 \",\n    x = \"Team\",\n    y = \"Minutes Played\",\n    caption=\"Source: Sports Reference | Nevaeh Stauffer\"\n    ) +\ntheme(\n    plot.title = element_text(color = \"black\", size = 14, face = \"bold\"),\n    plot.subtitle = element_text(color = \"black\", size = 10),\n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nAll of the teams have utilized their roster as all of the teams have around 2,000 minutes played for their non-starters. Nebraska led the Big Ten in their bench players minutes played while Maryland was the team who utilized their bench the least. But what is interesting is that Maryland was one of the teams that made the NCAA tournament.\nSo while teams like Nebraska had the most bench player minutes, did these players do enough on the court to be useful to their teams?\n\n\nCode\npointsstacked &lt;- bigten |&gt; \n  filter(Starter == \"B\") |&gt; \n  group_by(Team) |&gt; \n  summarize(\n    TotalTwos = sum(`2P`),\n    TotalThrees = sum(`3P`),\n    FreeThrows = sum(FT)\n  ) |&gt; \n  mutate(\n    Twos = TotalTwos*2,\n    Threes = TotalThrees*3\n  ) |&gt; \n  select(Team, Twos, Threes, FreeThrows) |&gt; \n  pivot_longer(cols=-Team, names_to=\"Type\", values_to = \"Points\")\n\nggplot() + \n  geom_bar(data=pointsstacked, aes(x = reorder(Team, Points), weight=Points, fill=Type)) + \n  coord_flip() + \n  labs(\n    title = \"Nebraska led in points scored by their bench\",\n    subtitle = \"The huskers combined for the most two-pointers, three-pointers and free throws scored\",\n    x = \"Team\",\n    y = \"Points Scored\",\n    caption=\"Source: Sports Reference | Nevaeh Stauffer\"\n    ) +\n  theme_minimal() +\ntheme(\n    plot.title = element_text(color = \"black\", size = 14, face = \"bold\"),\n    plot.subtitle = element_text(color = \"black\", size = 10),\n     plot.title.position = \"plot\"\n  )\n\n\n\n\n\nJust like in minutes played, Nebraska led the Big Ten last season for the most points scored by non-starting players. Rutgers, Iowa and Indiana weren’t too far behind. What else did these players do to contribute?\nWhat about rebounding? Which team’s bench players were most helpful on the boards?\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=stats, \n   aes(y=reorder(Team, avDrebounds), x=avDrebounds, xend=avOrebounds),\n    size = 2,\n    colour = \"grey\",\n    colour_x = \"blue\",\n    colour_xend = \"black\") + \n  labs(\n    title = \"Minnesota led in offensive and defensive rebounds\",\n    subtitle = \"Their bench's defensive rebounds was significantly higher than any other team\",\n    x = \"Offensive and Defensive Rebounds\",\n    y = \"Team\",\n    caption=\"Source: Sports Reference | Nevaeh Stauffer\"\n    ) +\n  theme_minimal() +\ntheme(\n    plot.title = element_text(color = \"black\", size = 14, face = \"bold\"),\n    plot.subtitle = element_text(color = \"black\", size = 10),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nMinnesota, Nebraska and Ohio State were teams that consistently ranked towards the top of the charts in minutes played, points scored and rebounds on the offensive and defensive sides. They were the top 3 teams that had the most depth and utilized it. What is interesting about that is that none of them made the NCAA tournament. So is depth helpful or is it all about the quality of your players?"
  },
  {
    "objectID": "posts/nebraska-shooting-home-away/index.html",
    "href": "posts/nebraska-shooting-home-away/index.html",
    "title": "Does Nebraska Men’s Baskebtall Shoot Better Behind the 3 Point Line on their Home Court?",
    "section": "",
    "text": "For the last five seasons, only 1 of 5 have ended with a winning record and that was back in the 2018-2019 season. For the next four seasons, the best record they have had was when they went 16-16 last season. It seems Nebraska’s men’s basketball team shoots way better when they play at home compared to when they’re away. Is it their home atmosphere or just the familiarity of PBA? Let’s see if numbers can back up this idea.\nSports Reference is a sports statistics website that provides the shooting percentages over each of the last five seasons. You can see the percentages of overall shots, free throws, and three-pointers. Within the data, it is easy to calculate Nebraska and the rest of college basketball’s shooting averages while differentiating the home and away games. To determine whether there is a clear answer about where the Husker’s shoot best, let’s look at Nebraska’s home and away shooting percentages from the last 5 seasons.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(ggalt)\nlibrary(ggbeeswarm)\nlibrary(gt)\n\nmen2019 &lt;-read_csv(\"neb.2019.csv\")\nmen2020 &lt;-read_csv(\"neb.2020.csv\")\nmen2021 &lt;-read_csv(\"neb.2021.csv\")\nmen2022 &lt;-read_csv(\"neb.2022.csv\")\nmen2023 &lt;-read_csv(\"neb.2023.csv\")\n\nmen &lt;- bind_rows(men2019,men2020,men2021, men2022, men2023)\n\nmenthrees &lt;- men |&gt; \n  group_by(Location, Year) |&gt; \n  summarize(\n    Average3PPct = mean(ThreePpct)\n  )\nmentwos &lt;- men |&gt; \n  group_by(Location, Year) |&gt; \n  summarize(\n    AverageFGpct = mean(FGpct)\n  )\n\nggplot() + \n  geom_line(data = menthrees, aes(x = Year, y = Average3PPct, color = Location, group=Location)) +\n  labs(\n    title = \"Nebraska shoots better with the home court advantage\",\n    subtitle = \"1 out of the 5 last seasons their 3P% on the road is worse\",\n    x = \"Year\",\n    y = \"Averages\",\n    caption=\"Source: Sports Reference | Nevaeh Stauffer\"\n    ) +\n  theme_minimal()+\n    theme(\n    plot.title = element_text(color = \"red\", size = 14, face = \"bold\"),\n    plot.subtitle = element_text(color = \"black\", size = 12, face = \"bold\")\n  )\n\n\n\n\n\nNebraska has shot significantly better on their home court behind the three point line for 4 out of the 5 past seasons. During the 2021-2022 season the away percentage was better but not by much.\nNow let’s compare the same data about Nebraska’s last five seasons to the rest of the teams in the Big 10 and see where they stand.\n\n\nCode\nlogs23 &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/logs23.csv\")\nlogs22 &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/logs22.csv\")\nlogs21 &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/logs21.csv\") \nlogs20 &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/logs20.csv\") |&gt; \n  rename(Season = season, TeamFull=Team)\nlogs19 &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/logs19.csv\") |&gt; \n  rename(Season = season, TeamFull=Team)\n\nlogs &lt;- bind_rows(logs23, logs22, logs21, logs20, logs19) |&gt; \n  mutate(\n    Location = case_when(\n      is.na(HomeAway) == TRUE ~ \"Home\",\n      HomeAway == \"@\" ~ \"Away\",\n      HomeAway == \"N\" ~ \"Neutral\"\n    )\n  )\n\nhomeawaylogs &lt;- logs |&gt; \n  group_by(TeamFull, Conference, Season, Location) |&gt;\n  summarize(\n    Average3PPct = mean(Team3PPCT, na.rm=TRUE)\n  ) |&gt; \n  mutate(TeamLocation = paste(TeamFull, Location))\n\nbig10away &lt;- homeawaylogs |&gt;\n  filter(str_trim(Conference) == \"Big Ten\") |&gt; \n  filter(Location == \"Away\")\n\n\nbig10home &lt;- homeawaylogs |&gt;\n  filter(str_trim(Conference) == \"Big Ten\") |&gt; \n  filter(Location == \"Home\")\n\nnuhome &lt;- big10home |&gt; \n  filter(TeamFull == \"Nebraska Cornhuskers\")\nnuaway &lt;- big10away |&gt; \n  filter(TeamFull == \"Nebraska Cornhuskers\")\n  \nmenaway &lt;- menthrees |&gt; \n  group_by(Location, Year) |&gt; \n  filter(Location == \"Away\")\n\nmenhome &lt;- menthrees |&gt; \n  group_by(Location, Year) |&gt; \n  filter(Location == \"Home\") \n\nggplot() +\n  geom_beeswarm(\n    data=big10home, \n    aes(x=Average3PPct, y=Season), color=\"darkblue\", alpha=.3) +\n  geom_beeswarm(\n    data=big10away, \n    aes(x=Average3PPct, y=Season), color=\"blue\", alpha=.3) +\n  geom_beeswarm(\n    data=nuhome, \n    aes(x=Average3PPct, y=Season), color=\"red\") + \n  geom_beeswarm(\n    data=nuaway, \n    aes(x=Average3PPct, y=Season), color=\"darkred\") +\n  geom_text_repel(data=nuhome, \n    aes(x=Average3PPct, y=Season, label=TeamLocation)) + \n  labs(\n    title = \"Nebraska's 3 Point shooting is just average \",\n    subtitle = \"Comparing the Huskers to the Big Ten, Nebraska is in the middle\",\n    x = \"Averages\",\n    y = \"Season\",\n    caption=\"Source: Sports Reference | Nevaeh Stauffer\"\n    ) +\n  theme_minimal()+\n    theme(\n    plot.title = element_text(color = \"red\", size = 14, face = \"bold\"),\n    plot.subtitle = element_text(color = \"black\", size = 12, face = \"bold\")\n  )\n\n\n\n\n\nSo we know that Nebraska shoots better behind the arc with the home court advantage. But compared to the rest of the Big Ten, those percentages still aren’t great and are just about average. Now let’s see if Nebraska’s best home shooting percentages rank in the top 10 in the Big Ten over the past five seasons.\n\n\nCode\nbig10home |&gt; \n  ungroup() |&gt; \n  top_n(10, wt=Average3PPct) |&gt; \n  arrange(desc(Average3PPct)) |&gt;\n  select(TeamFull, Season, Average3PPct) |&gt; \n  gt() |&gt; \n  cols_label(\n    TeamFull = \"Team\",\n    Average3PPct = \"Percentage\"\n  ) |&gt;\n  tab_header(\n    title = \"Behind the arc isn't where the Huskers are most likely to dominate\",\n    subtitle = \"Nebraska's best 3 Point Percentage doesn't even rank in the Top 10\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Nevaeh Stauffer  |  **Source:** Sports Reference\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = Average3PPct,\n    decimals = 1\n  ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"red\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      columns = Average3PPct,\n      rows = Average3PPct &gt; .398)\n  )\n\n\n\n\n\n\n  \n    \n      Behind the arc isn't where the Huskers are most likely to dominate\n    \n    \n      Nebraska's best 3 Point Percentage doesn't even rank in the Top 10\n    \n    \n      Team\n      Season\n      Percentage\n    \n  \n  \n    Michigan State Spartans\n2022-2023\n42.0%\n    Purdue Boilermakers\n2021-2022\n40.7%\n    Penn State Nittany Lions\n2022-2023\n40.4%\n    Wisconsin Badgers\n2020-2021\n40.3%\n    Ohio State Buckeyes\n2019-2020\n40.3%\n    Michigan Wolverines\n2020-2021\n40.0%\n    Purdue Boilermakers\n2018-2019\n39.5%\n    Iowa Hawkeyes\n2020-2021\n39.4%\n    Iowa Hawkeyes\n2022-2023\n39.3%\n    Michigan State Spartans\n2021-2022\n39.1%\n  \n  \n    \n      By: Nevaeh Stauffer  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nOver the course of the past 5 seasons, Nebraska’s best at home shooting percentage doesn’t even rank in the top 10.\nSo Nebraska has had some great individual shooters on their team but as a team, behind the three point line isn’t where you are gonna see them perform at their best abilities."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Latest Posts",
    "section": "",
    "text": "Using Linear Regression To Draft Fantasy Rookies\n\n\n\n\n\n\n\nrookie\n\n\npredictions\n\n\nwide receiver\n\n\n\n\n\n\n\n\n\n\n\nMay 9, 2024\n\n\nNevaeh Stauffer\n\n\n\n\n\n\n  \n\n\n\n\nMachine Learning 2024 NCAA Bracket\n\n\n\n\n\n\n\nncaa\n\n\nbasketball\n\n\nbracket\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2024\n\n\nNevaeh Stauffer\n\n\n\n\n\n\n  \n\n\n\n\nWhich Big Ten Team Had the Most Effective Bench Players Last Season?\n\n\n\n\n\n\n\nbig-ten\n\n\nbasketball\n\n\nbench\n\n\n\n\n\n\n\n\n\n\n\nDec 3, 2023\n\n\nNevaeh Stauffer\n\n\n\n\n\n\n  \n\n\n\n\nDoes Nebraska Men’s Baskebtall Shoot Better Behind the 3 Point Line on their Home Court?\n\n\n\n\n\n\n\nnebraska\n\n\nbasketball\n\n\nshooting\n\n\n\n\n\n\n\n\n\n\n\nNov 10, 2023\n\n\nNevaeh Stauffer\n\n\n\n\n\n\n  \n\n\n\n\nCHANGE THIS TO BE THE TITLE OF YOUR POST\n\n\n\n\n\n\n\nsports\n\n\ndata\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2022\n\n\nNevaeh Stauffer\n\n\n\n\n\n\nNo matching items"
  }
]